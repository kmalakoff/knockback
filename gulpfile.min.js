/*
  gulpfile.js 1.2.3
  Copyright (c)  2011-2022 Kevin Malakoff.
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Source: https://github.com/kmalakoff/knockback
  Dependencies: Knockout.js, Backbone.js, and Underscore.js (or LoDash.js).
  Optional dependencies: Backbone.ModelRef.js and BackboneORM.
*/
const path=require("path"),_=require("underscore"),Queue=require("queue-async"),es=require("event-stream"),{src,dest,series}=require("gulp"),gutil=require("gulp-util"),webpack=require("gulp-webpack-config"),rename=require("gulp-rename"),uglify=require("gulp-uglify"),header=require("gulp-header"),mocha=require("gulp-mocha"),nuget=require("nuget"),HEADER=`/*
  <%= file.path.split('/').splice(-1)[0].replace('.min', '') %> <%= pkg.version %>
  Copyright (c)  2011-${(new Date).getFullYear()} Kevin Malakoff.
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Source: https://github.com/kmalakoff/knockback
  Dependencies: Knockout.js, Backbone.js, and Underscore.js (or LoDash.js).
  Optional dependencies: Backbone.ModelRef.js and BackboneORM.
*/
`,LIBRARY_FILES=require("./config/files").libraries;function build(e){src("config/builds/library/**/*.webpack.config.js").pipe(webpack()).pipe(header(HEADER,{pkg:require("./package.json")})).pipe(dest(".")).on("end",e)}function minify(e){src(["*.js","!*.min.js","!_temp/**/*.js","!node_modules/"]).pipe(uglify()).pipe(rename({suffix:".min"})).pipe(header(HEADER,{pkg:require("./package.json")})).pipe(dest(e=>e.base)).on("end",e)}function testNode(e){var r=Array.from(process.argv.slice(3)).map(e=>"@"+e.replace(/^[-]+/,"")).join(" ");const s={reporter:"dot",require:"coffeescript/register"};r&&(s.grep=r),gutil.log("Running Node.js tests "+r),src("test/spec/**/*.tests.coffee").pipe(mocha(s)).pipe(es.writeArray(e))}function testBrowsers(e){var r=Array.from(process.argv.slice(3)).map(e=>"@"+e.replace(/^[-]+/,"")).join(" ");gutil.log("Running Browser tests "+r),require("./config/karma/run")({tags:r},e)}function nugetGulp(){return es.map((e,s)=>nuget.pack(e,function(e,r){return e?s(e):nuget.push(r,function(e){return e?gutil.log(e):s()})}))}function publish(e){const r=(r,e,s)=>src(LIBRARY_FILES.concat(["README.md","RELEASE_NOTES.md"].concat(e))).pipe(dest(e=>path.join(r,path.dirname(e.path).replace(__dirname,"")))).on("end",s),s=new Queue(1);s.defer(e=>Async.series([testNode,testBrowsers],e)),s.defer(e=>r("packages/npm",["component.json","bower.json"],e)),s.defer(e=>r("packages/nuget/Content/Scripts",[],e)),s.defer(e=>src("packages/nuget/*.nuspec").pipe(nugetGulp()).on("end",e)),s.await(function(e){return e&&console.log(e),process.exit(e?1:0)})}exports.build=series(build,minify),exports["test:node"]=testNode,exports["test:browsers"]=testBrowsers,exports.test=series(testNode,testBrowsers),exports.publish=publish,exports.default=exports["test:node"];